var myApp=angular.module("myApp",["ngAnimate","routes","controllers","services","directives"]);
var directives=angular.module("directives",["ngAnimate"]);directives.directive("linkUsed",function(){var i;return i=function(i,n,e){n.bind("click",function(){$(".linkIn").removeClass("linkIn"),$(this).addClass("linkIn")})},{link:i}});
$(function(){toastr.options={progressBar:!0,positionClass:"toast-top-right",preventDuplicates:!0,preventOpenDuplicates:!0,onclick:null,showDuration:"2000",hideDuration:"2000",timeOut:"2000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"swing",showMethod:"show",hideMethod:"hide"}});
var routes=angular.module("routes",["ui.router"]);routes.config(["$stateProvider","$urlRouterProvider",function(r,t){r.state("login",{url:"/",templateUrl:"/login.html",controller:"loginCtrl"}).state("register",{url:"/register",templateUrl:"/register.html",controller:"registerCtrl"}).state("admin-profile",{url:"/admin-profile",templateUrl:"/adminProfile.html",controller:"adminProfCtrl"}).state("admin-profile.users",{url:"/users",templateUrl:"/adminProfUsers.html",controller:"adminProfUsersCtrl"}).state("admin-profile.user",{url:"/user",templateUrl:"/adminProfUser.html",controller:"adminProfUserCtrl"}).state("admin-profile.edit-user",{url:"/edit-user",templateUrl:"/adminProfEditUser.html",controller:"adminProfEditUserCtrl"}).state("my-profile",{url:"/my-profile",templateUrl:"/myProfile.html",controller:"myProfCtrl"}).state("my-profile.data",{url:"/data",templateUrl:"/myProfileData.html",controller:"myProfDataCtrl"}).state("my-profile.edit",{url:"/edit",templateUrl:"/myProfileEdit.html",controller:"myProfEditCtrl"}),t.otherwise("/")}]);
var services=angular.module("services",["ngAnimate"]);services.service("storage",["$q","$location","$timeout",function(e,r,s){this.str=function(){var e=JSON.parse(localStorage.getItem("storage"))||[];return e},this.init=function(r){var s=e.defer();return 0===r.length?(r.push({role:"admin",name:"John Doe",email:"admin@hotmail.com",password:"123",regDate:new Date,modDate:""}),s.resolve(r)):s.reject(r),s.promise},this.set=function(e,r){localStorage.setItem(e,JSON.stringify(r))},this.checkLogin=function(r,s,a,t){for(var o=0;o<r.length;++o)r[o].name===s.name&&r[o].password===s.password&&(a.user="exist",a.role=r[o].role,t=r[o]);var i=e.defer();return"exist"===a.user?i.resolve(t):i.reject(t),i.promise},this.loginRedirect=function(r,s){var a=e.defer();return"exist"===r.user?(s="logged",a.resolve(s)):a.reject(s),a.promise},this.register=function(r){var r=r,s={};s.name=r.name,s.role="user",s.password=r.password,s.email=r.email,s.regDate=new Date,s.modDate="";for(var a,t=this.str(),o=e.defer(),i=0;i<t.length;++i)t[i].password!==r.password&&t[i].email!==r.email||(a="exist");return"exist"===a?o.reject(s):(t.push(s),this.set("storage",t),o.resolve(s)),o.promise},this.arrSplice=function(r,s,a,t){for(var o,i,n=e.defer(),l=0;l<r.length;++l)r[l].email===a.email&&r[l].password===a.password&&(t=r[l],i="exist");return"exist"===i&&(o=r.indexOf(t),r.splice(o,1),n.resolve(r)),n.promise},this.userCheckStorage=function(a,t,o,i,n){for(var l={},m=e.defer(),d=0;d<a.length;++d)a[d].email===t.email&&(l.email="error"),a[d].password===t.password&&(l.password="error");return"error"!==l.email&&"error"!==l.password?(o.name=t.name,o.email=t.email,o.password=t.password,o.regDate=i.regDate,o.modDate=new Date,o.role="user",i.name=t.name,i.email=t.email,i.password=t.password,i.regDate=o.regDate,i.modDate=new Date,i.role=o.role,a.push(o),this.set("storage",a),s(function(){r.path(n)},1500),m.resolve(l)):m.reject(l),m.promise},this.adminCheckStorage=function(a,t,o,i,n){for(var l={},m=e.defer(),d=0;d<a.length;++d)a[d].email===t.email&&(l.email="error"),a[d].password===t.password&&(l.password="error");return"error"!==l.email&&"error"!==l.password&&"error"!==l.role?(o.name=t.name,o.email=t.email,o.password=t.password,o.regDate=i.regDate,o.modDate=new Date,o.role=t.role,i.name=t.name,i.email=t.email,i.password=t.password,i.regDate=o.regDate,i.modDate=new Date,i.role=t.role,a.push(o),this.set("storage",a),s(function(){r.path(n)},1500),m.resolve(l)):m.reject(l),m.promise},this.toastr=function(e){toastr.info(e)}}]);
var adminProfCtrl=angular.module("adminProfCtrl",["routes"]);adminProfCtrl.controller("adminProfCtrl",["$scope","$rootScope","$location",function(o,r,a){a.path("/admin-profile/users"),void 0===r.user&&a.path("/"),o.userData=r.userData,o.logout=function(){r.user=void 0,a.path("/")}}]);
var adminProfEditUserCtrl=angular.module("adminProfEditUserCtrl",["routes","services"]);adminProfEditUserCtrl.controller("adminProfEditUserCtrl",["$scope","$rootScope","$location","storage",function(r,e,t,a){void 0===e.user&&t.path("/"),r.placeholder=e.adminUser,r.userData={};var o={},s=[],i=a.str(),n=r.userData,d=e.adminUser;a.arrSplice(i,s,d,o).then(function(r){s=r}),r.submit=function(r){a.adminCheckStorage(s,n,o,d,"/admin-profile/user").then(function(r){toastr.success("User edited!")}).catch(function(r){"error"===r.email?toastr.error("Email already exist"):"error"===r.password&&toastr.error("Password already exist")})}}]);
var adminProfUserCtrl=angular.module("adminProfUserCtrl",["routes"]);adminProfUserCtrl.controller("adminProfUserCtrl",["$scope","$rootScope","$location",function(r,o,a){void 0===o.user&&a.path("/"),r.userData=o.adminUser}]);
var adminProfUsersCtrl=angular.module("adminProfUsersCtrl",["routes","services"]);adminProfUsersCtrl.controller("adminProfUsersCtrl",["$scope","$rootScope","$location","storage",function(r,o,s,e){void 0===o.user&&s.path("/"),r.storage=e.str(),r.link=function(r){s.path("/admin-profile/user"),o.adminUser=r}}]);
var controllers=angular.module("controllers",["loginCtrl","registerCtrl","adminProfCtrl","adminProfUsersCtrl","adminProfUserCtrl","adminProfEditUserCtrl","myProfCtrl","myProfDataCtrl","myProfEditCtrl"]);
var loginCtrl=angular.module("loginCtrl",[]);loginCtrl.controller("loginCtrl",["$scope","$http","$location","$rootScope","$timeout","storage",function(o,t,n,r,e,i){i.toastr("Please log in!");var l=i.str();i.init(l).then(function(o){console.log(o)}).catch(function(o){console.log(o)}),i.set("storage",l);var c,a={},u={};o.submit=function(o){i.checkLogin(l,o,a,u).then(function(o){r.userData=o}).catch(function(o){}),e(function(){i.loginRedirect(a,c).then(function(o){r.user=o,"admin"===a.role?n.path("/admin-profile"):"user"===a.role&&n.path("/my-profile")}).catch(function(o){toastr.error("Wrong fullname or password!")})},1e3)}}]);
var myProfCtrl=angular.module("myProfCtrl",["routes","services","directives"]);myProfCtrl.controller("myProfCtrl",["$rootScope","$scope","$location","storage",function(o,r,t,e){t.path("/my-profile/data"),r.userData=o.userData,r.logout=function(){o.user=void 0,t.path("/")}}]);
var myProfDataCtrl=angular.module("myProfDataCtrl",["routes"]);myProfDataCtrl.controller("myProfDataCtrl",["$scope","$http","$rootScope","$location",function(t,a,r,o){void 0===r.user&&o.path("/"),t.userData=r.userData}]);
var myProfEditCtrl=angular.module("myProfEditCtrl",["routes","services"]);myProfEditCtrl.controller("myProfEditCtrl",["$scope","$rootScope","$location","$timeout","storage",function(r,t,e,o,a){void 0===t.user&&e.path("/"),r.placeholder=t.userData,r.userData={};var s={},i=[],c=a.str(),l=r.userData,u=t.userData;a.arrSplice(c,i,u,s).then(function(r){i=r}),r.submit=function(r){a.userCheckStorage(i,l,s,u,"/my-profile/data").then(function(r){toastr.success("User edited!")}).catch(function(r){"error"===r.email?toastr.error("Email already exist"):"error"===r.password&&toastr.error("Password already exist")})}}]);
var registerCtrl=angular.module("registerCtrl",["routes","services"]);registerCtrl.controller("registerCtrl",["$scope","$http","$location","$timeout","storage",function(t,r,e,s,o){o.toastr("Please fill the form!"),t.register=function(t){o.register(t).then(function(t){toastr.success("User created!"),s(function(){e.path("/")},1600)}).catch(function(t){toastr.warning("Email or password already exist!")})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXIuanMiLCJkaXJlY3RpdmVzLmpzIiwianF1ZXJ5LmpzIiwicm91dGVzLmpzIiwic2VydmljZXMuanMiLCJjb250cm9sbGVycy9hZG1pblByb2ZDdHJsLmpzIiwiY29udHJvbGxlcnMvYWRtaW5Qcm9mRWRpdFVzZXJDdHJsLmpzIiwiY29udHJvbGxlcnMvYWRtaW5Qcm9mVXNlckN0cmwuanMiLCJjb250cm9sbGVycy9hZG1pblByb2ZVc2Vyc0N0cmwuanMiLCJjb250cm9sbGVycy9jb250cm9sbGVycy5qcyIsImNvbnRyb2xsZXJzL2xvZ2luQ3RybC5qcyIsImNvbnRyb2xsZXJzL215UHJvZkN0cmwuanMiLCJjb250cm9sbGVycy9teVByb2ZEYXRhQ3RybC5qcyIsImNvbnRyb2xsZXJzL215UHJvZkVkaXRDdHJsLmpzIiwiY29udHJvbGxlcnMvcmVnaXN0ZXJDdHJsLmpzIl0sIm5hbWVzIjpbIm15QXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZXMiLCJkaXJlY3RpdmUiLCJsaW5rIiwic2NvcGUiLCJlbGVtIiwiYXR0cnMiLCJiaW5kIiwiJCIsInJlbW92ZUNsYXNzIiwidGhpcyIsImFkZENsYXNzIiwidG9hc3RyIiwib3B0aW9ucyIsInByb2dyZXNzQmFyIiwicG9zaXRpb25DbGFzcyIsInByZXZlbnREdXBsaWNhdGVzIiwicHJldmVudE9wZW5EdXBsaWNhdGVzIiwib25jbGljayIsInNob3dEdXJhdGlvbiIsImhpZGVEdXJhdGlvbiIsInRpbWVPdXQiLCJleHRlbmRlZFRpbWVPdXQiLCJzaG93RWFzaW5nIiwiaGlkZUVhc2luZyIsInNob3dNZXRob2QiLCJoaWRlTWV0aG9kIiwicm91dGVzIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIm90aGVyd2lzZSIsInNlcnZpY2VzIiwic2VydmljZSIsIiRxIiwiJGxvY2F0aW9uIiwiJHRpbWVvdXQiLCJzdHIiLCJzdG9yYWdlIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImluaXQiLCJkZWZlciIsImxlbmd0aCIsInB1c2giLCJyb2xlIiwibmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJyZWdEYXRlIiwiRGF0ZSIsIm1vZERhdGUiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsInNldCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjaGVja0xvZ2luIiwidXNlciIsImNoZWNrIiwidXNlckRhdGEiLCJpIiwibG9naW5SZWRpcmVjdCIsImxvZ2dlZCIsInJlZ2lzdGVyIiwibmV3VXNlciIsImFyclNwbGljZSIsImFyciIsInJvb3QiLCJvYmoiLCJjb3VudCIsImluZGV4T2YiLCJzcGxpY2UiLCJ1c2VyQ2hlY2tTdG9yYWdlIiwicGF0aCIsImFkbWluQ2hlY2tTdG9yYWdlIiwibWVzc2FnZSIsImluZm8iLCJhZG1pblByb2ZDdHJsIiwiJHNjb3BlIiwiJHJvb3RTY29wZSIsInVuZGVmaW5lZCIsImxvZ291dCIsImFkbWluUHJvZkVkaXRVc2VyQ3RybCIsInBsYWNlaG9sZGVyIiwiYWRtaW5Vc2VyIiwicm9vdERhdGEiLCJ0aGVuIiwiZGF0YSIsInN1Ym1pdCIsInN1Y2Nlc3MiLCJjYXRjaCIsImVycm9yIiwiYWRtaW5Qcm9mVXNlckN0cmwiLCJhZG1pblByb2ZVc2Vyc0N0cmwiLCJjb250cm9sbGVycyIsImxvZ2luQ3RybCIsIiRodHRwIiwiY29uc29sZSIsImxvZyIsImVyciIsIm15UHJvZkN0cmwiLCJteVByb2ZEYXRhQ3RybCIsIm15UHJvZkVkaXRDdHJsIiwicmVnaXN0ZXJDdHJsIiwid2FybmluZyJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsT0FBUUMsUUFBUUMsT0FBTyxTQUN2QixZQUNBLFNBQ0EsY0FDQSxXQUNBO0FDTEosR0FBSUMsWUFBYUYsUUFBUUMsT0FBTyxjQUFlLGFBQy9DQyxZQUFXQyxVQUFVLFdBQVksV0FDL0IsR0FB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T0FBT3FGLFFBQVEsaUJBQ2Z6RCxFQUFTLFdBQ1BELEVBQVUwQyxLQUFLLE1BQ2QsUUFDRmlCLE1BQU0sU0FBVUMsR0FDakJ2RixPQUFPb0csUUFBUSIsImZpbGUiOiJhbmd1bGFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoXCJteUFwcFwiLCBbXCJuZ0FuaW1hdGVcIiwgXCJyb3V0ZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgXCJjb250cm9sbGVyc1wiLCBcInNlcnZpY2VzXCIsIFwiZGlyZWN0aXZlc1wiXSk7XG4iLCJ2YXIgZGlyZWN0aXZlcyA9IGFuZ3VsYXIubW9kdWxlKFwiZGlyZWN0aXZlc1wiLCBbXCJuZ0FuaW1hdGVcIl0pO1xuZGlyZWN0aXZlcy5kaXJlY3RpdmUoXCJsaW5rVXNlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxpbms7XG4gICAgbGluayA9IGZ1bmN0aW9uIChzY29wZSwgZWxlbSwgYXR0cnMpIHtcbiAgICAgICAgZWxlbS5iaW5kKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJChcIi5saW5rSW5cIikucmVtb3ZlQ2xhc3MoXCJsaW5rSW5cIik7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwibGlua0luXCIpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsaW5rOiBsaW5rXG4gICAgfVxufSk7IiwiJChmdW5jdGlvbigpe1xuICAgICB0b2FzdHIub3B0aW9ucyA9IHtcbiAgICAgICAgXCJwcm9ncmVzc0JhclwiOiB0cnVlXG4gICAgICAgICwgXCJwb3NpdGlvbkNsYXNzXCI6IFwidG9hc3QtdG9wLXJpZ2h0XCJcbiAgICAgICAgLCBcInByZXZlbnREdXBsaWNhdGVzXCI6IHRydWVcbiAgICAgICAgLCBcInByZXZlbnRPcGVuRHVwbGljYXRlc1wiOiB0cnVlXG4gICAgICAgICwgXCJvbmNsaWNrXCI6IG51bGxcbiAgICAgICAgLCBcInNob3dEdXJhdGlvblwiOiBcIjIwMDBcIlxuICAgICAgICAsIFwiaGlkZUR1cmF0aW9uXCI6IFwiMjAwMFwiXG4gICAgICAgICwgXCJ0aW1lT3V0XCI6IFwiMjAwMFwiXG4gICAgICAgICwgXCJleHRlbmRlZFRpbWVPdXRcIjogXCIxMDAwXCJcbiAgICAgICAgLCBcInNob3dFYXNpbmdcIjogXCJzd2luZ1wiXG4gICAgICAgICwgXCJoaWRlRWFzaW5nXCI6IFwic3dpbmdcIlxuICAgICAgICAsIFwic2hvd01ldGhvZFwiOiBcInNob3dcIlxuICAgICAgICAsIFwiaGlkZU1ldGhvZFwiOiBcImhpZGVcIlxuICAgIH1cbn0pOyIsInZhciByb3V0ZXMgPSBhbmd1bGFyLm1vZHVsZShcInJvdXRlc1wiLCBbXCJ1aS5yb3V0ZXJcIl0pO1xucm91dGVzLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwibG9naW5cIiwge1xuICAgICAgICB1cmw6IFwiL1wiXG4gICAgICAgICwgdGVtcGxhdGVVcmw6IFwiL2xvZ2luLmh0bWxcIlxuICAgICAgICAsIGNvbnRyb2xsZXI6IFwibG9naW5DdHJsXCJcbiAgICB9KS5zdGF0ZShcInJlZ2lzdGVyXCIsIHtcbiAgICAgICAgdXJsOiBcIi9yZWdpc3RlclwiXG4gICAgICAgICwgdGVtcGxhdGVVcmw6IFwiL3JlZ2lzdGVyLmh0bWxcIlxuICAgICAgICAsIGNvbnRyb2xsZXI6IFwicmVnaXN0ZXJDdHJsXCJcbiAgICB9KS5zdGF0ZShcImFkbWluLXByb2ZpbGVcIiwge1xuICAgICAgICB1cmw6IFwiL2FkbWluLXByb2ZpbGVcIlxuICAgICAgICAsIHRlbXBsYXRlVXJsOiBcIi9hZG1pblByb2ZpbGUuaHRtbFwiXG4gICAgICAgICwgY29udHJvbGxlcjogXCJhZG1pblByb2ZDdHJsXCJcbiAgICB9KS5zdGF0ZShcImFkbWluLXByb2ZpbGUudXNlcnNcIiwge1xuICAgICAgICB1cmw6IFwiL3VzZXJzXCJcbiAgICAgICAgLCB0ZW1wbGF0ZVVybDogXCIvYWRtaW5Qcm9mVXNlcnMuaHRtbFwiXG4gICAgICAgICwgY29udHJvbGxlcjogXCJhZG1pblByb2ZVc2Vyc0N0cmxcIlxuICAgIH0pLnN0YXRlKFwiYWRtaW4tcHJvZmlsZS51c2VyXCIsIHtcbiAgICAgICAgdXJsOiBcIi91c2VyXCJcbiAgICAgICAgLCB0ZW1wbGF0ZVVybDogXCIvYWRtaW5Qcm9mVXNlci5odG1sXCJcbiAgICAgICAgLCBjb250cm9sbGVyOiBcImFkbWluUHJvZlVzZXJDdHJsXCJcbiAgICB9KS5zdGF0ZShcImFkbWluLXByb2ZpbGUuZWRpdC11c2VyXCIsIHtcbiAgICAgICAgdXJsOiBcIi9lZGl0LXVzZXJcIlxuICAgICAgICAsIHRlbXBsYXRlVXJsOiBcIi9hZG1pblByb2ZFZGl0VXNlci5odG1sXCJcbiAgICAgICAgLCBjb250cm9sbGVyOiBcImFkbWluUHJvZkVkaXRVc2VyQ3RybFwiXG4gICAgfSkuc3RhdGUoXCJteS1wcm9maWxlXCIsIHtcbiAgICAgICAgdXJsOiBcIi9teS1wcm9maWxlXCJcbiAgICAgICAgLCB0ZW1wbGF0ZVVybDogXCIvbXlQcm9maWxlLmh0bWxcIlxuICAgICAgICAsIGNvbnRyb2xsZXI6IFwibXlQcm9mQ3RybFwiXG4gICAgfSkuc3RhdGUoXCJteS1wcm9maWxlLmRhdGFcIiwge1xuICAgICAgICB1cmw6IFwiL2RhdGFcIlxuICAgICAgICAsIHRlbXBsYXRlVXJsOiBcIi9teVByb2ZpbGVEYXRhLmh0bWxcIlxuICAgICAgICAsIGNvbnRyb2xsZXI6IFwibXlQcm9mRGF0YUN0cmxcIlxuICAgIH0pLnN0YXRlKFwibXktcHJvZmlsZS5lZGl0XCIsIHtcbiAgICAgICAgdXJsOiBcIi9lZGl0XCJcbiAgICAgICAgLCB0ZW1wbGF0ZVVybDogXCIvbXlQcm9maWxlRWRpdC5odG1sXCJcbiAgICAgICAgLCBjb250cm9sbGVyOiBcIm15UHJvZkVkaXRDdHJsXCJcbiAgICB9KVxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvXCIpO1xufSk7IiwidmFyIHNlcnZpY2VzID0gYW5ndWxhci5tb2R1bGUoXCJzZXJ2aWNlc1wiLCBbXCJuZ0FuaW1hdGVcIl0pO1xuc2VydmljZXMuc2VydmljZShcInN0b3JhZ2VcIiwgW1wiJHFcIixcIiRsb2NhdGlvblwiLCBcIiR0aW1lb3V0XCIsIGZ1bmN0aW9uICgkcSwkbG9jYXRpb24sICR0aW1lb3V0KSB7XG4gICAgXG4gICAgdGhpcy5zdHIgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgc3RvcmFnZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzdG9yYWdlXCIpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2U7XG4gICAgfVxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKHN0cil7XG4gICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzdHIucHVzaCh7XG4gICAgICAgICAgICAgICAgcm9sZTogXCJhZG1pblwiXG4gICAgICAgICAgICAgICAgLCBuYW1lOiBcIkpvaG4gRG9lXCJcbiAgICAgICAgICAgICAgICAsIGVtYWlsOiBcImFkbWluQGhvdG1haWwuY29tXCJcbiAgICAgICAgICAgICAgICAsIHBhc3N3b3JkOiBcIjEyM1wiXG4gICAgICAgICAgICAgICAgLCByZWdEYXRlOiBuZXcgRGF0ZSgpXG4gICAgICAgICAgICAgICAgLCBtb2REYXRlOiBcIlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlZmVyLnJlc29sdmUoc3RyKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBkZWZlci5yZWplY3Qoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy5zZXQgPSBmdW5jdGlvbihuYW1lLHN0cil7XG4gICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkoc3RyKSk7XG4gICAgfVxuICAgIHRoaXMuY2hlY2tMb2dpbiA9IGZ1bmN0aW9uKHN0b3JhZ2UsdXNlcixjaGVjayx1c2VyRGF0YSl7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RvcmFnZS5sZW5ndGg7ICsraSkgeyBcbiAgICAgICAgICAgIGlmIChzdG9yYWdlW2ldLm5hbWUgPT09IHVzZXIubmFtZSAmJiBzdG9yYWdlW2ldLnBhc3N3b3JkID09PSB1c2VyLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgY2hlY2sudXNlciA9IFwiZXhpc3RcIjtcbiAgICAgICAgICAgICAgICBjaGVjay5yb2xlID0gc3RvcmFnZVtpXS5yb2xlO1xuICAgICAgICAgICAgICAgIHVzZXJEYXRhID0gc3RvcmFnZVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG4gICAgICAgICBpZihjaGVjay51c2VyID09PSBcImV4aXN0XCIpe1xuICAgICAgICAgICBkZWZlci5yZXNvbHZlKHVzZXJEYXRhKTsgICBcbiAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgIGRlZmVyLnJlamVjdCh1c2VyRGF0YSk7XG4gICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlci5wcm9taXNlO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLmxvZ2luUmVkaXJlY3QgPSBmdW5jdGlvbihjaGVjayxsb2dnZWQpe1xuICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG4gICAgICAgaWYgKGNoZWNrLnVzZXIgPT09IFwiZXhpc3RcIikge1xuICAgICAgICAgICAgICAgICBsb2dnZWQgPSBcImxvZ2dlZFwiO1xuICAgICAgICAgICAgICAgICBkZWZlci5yZXNvbHZlKGxvZ2dlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZlci5yZWplY3QobG9nZ2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XG4gICAgfVxuICAgIFxuICAgIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VyKXtcbiAgICAgICAgdmFyIHVzZXIgPSB1c2VyO1xuICAgICAgICB2YXIgbmV3VXNlciA9IHt9O1xuICAgICAgICBuZXdVc2VyLm5hbWUgPSB1c2VyLm5hbWU7XG4gICAgICAgIG5ld1VzZXIucm9sZSA9IFwidXNlclwiO1xuICAgICAgICBuZXdVc2VyLnBhc3N3b3JkID0gdXNlci5wYXNzd29yZDtcbiAgICAgICAgbmV3VXNlci5lbWFpbCA9IHVzZXIuZW1haWw7XG4gICAgICAgIG5ld1VzZXIucmVnRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIG5ld1VzZXIubW9kRGF0ZSA9IFwiXCI7XG4gICAgICAgIHZhciBzdHIgPSB0aGlzLnN0cigpO1xuICAgICAgICB2YXIgY2hlY2s7XG4gICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoc3RyW2ldLnBhc3N3b3JkID09PSB1c2VyLnBhc3N3b3JkIHx8IHN0cltpXS5lbWFpbCA9PT0gdXNlci5lbWFpbCkge1xuICAgICAgICAgICAgICAgICBjaGVjayA9IFwiZXhpc3RcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihjaGVjayA9PT0gXCJleGlzdFwiKXtcbiAgICAgICAgICAgIGRlZmVyLnJlamVjdChuZXdVc2VyKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgc3RyLnB1c2gobmV3VXNlcik7XG4gICAgICAgICAgICB0aGlzLnNldChcInN0b3JhZ2VcIixzdHIpO1xuICAgICAgICAgICAgZGVmZXIucmVzb2x2ZShuZXdVc2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5hcnJTcGxpY2UgPSBmdW5jdGlvbiAoc3RyLCBhcnIsIHJvb3QsIG9iaikge1xuICAgICAgICB2YXIgY291bnQ7XG4gICAgICAgIHZhciBjaGVjaztcbiAgICAgICAgdmFyIGRlZmVyID0gJHEuZGVmZXIoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChzdHJbaV0uZW1haWwgPT09IHJvb3QuZW1haWwgJiYgc3RyW2ldLnBhc3N3b3JkID09PSByb290LnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgIG9iaiA9IHN0cltpXTtcbiAgICAgICAgICAgICAgICBjaGVjayA9IFwiZXhpc3RcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihjaGVjayA9PT0gXCJleGlzdFwiKXtcbiAgICAgICAgIGNvdW50ID0gc3RyLmluZGV4T2Yob2JqKTtcbiAgICAgICAgIHN0ci5zcGxpY2UoY291bnQsIDEpO1xuICAgICAgICAgZGVmZXIucmVzb2x2ZShzdHIpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkZWZlci5wcm9taXNlO1xuICAgIH1cbiAgICB0aGlzLiAgIHVzZXJDaGVja1N0b3JhZ2UgPSBmdW5jdGlvbiAoYXJyLCB1c2VyRGF0YSwgb2JqLCByb290LHBhdGgpIHtcbiAgICAgICAgdmFyIGNoZWNrID0ge307XG4gICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoYXJyW2ldLmVtYWlsID09PSB1c2VyRGF0YS5lbWFpbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrLmVtYWlsID0gXCJlcnJvclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFycltpXS5wYXNzd29yZCA9PT0gdXNlckRhdGEucGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICBjaGVjay5wYXNzd29yZCA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2suZW1haWwgIT09IFwiZXJyb3JcIiAmJiBjaGVjay5wYXNzd29yZCAhPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBvYmoubmFtZSA9IHVzZXJEYXRhLm5hbWU7XG4gICAgICAgICAgICBvYmouZW1haWwgPSB1c2VyRGF0YS5lbWFpbDtcbiAgICAgICAgICAgIG9iai5wYXNzd29yZCA9IHVzZXJEYXRhLnBhc3N3b3JkO1xuICAgICAgICAgICAgb2JqLnJlZ0RhdGUgPSByb290LnJlZ0RhdGU7XG4gICAgICAgICAgICBvYmoubW9kRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBvYmoucm9sZSA9IFwidXNlclwiO1xuICAgICAgICAgICAgcm9vdC5uYW1lID0gdXNlckRhdGEubmFtZTtcbiAgICAgICAgICAgIHJvb3QuZW1haWwgPSB1c2VyRGF0YS5lbWFpbDtcbiAgICAgICAgICAgIHJvb3QucGFzc3dvcmQgPSB1c2VyRGF0YS5wYXNzd29yZDtcbiAgICAgICAgICAgIHJvb3QucmVnRGF0ZSA9IG9iai5yZWdEYXRlO1xuICAgICAgICAgICAgcm9vdC5tb2REYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJvb3Qucm9sZSA9IG9iai5yb2xlO1xuICAgICAgICAgICAgYXJyLnB1c2gob2JqKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KFwic3RvcmFnZVwiLGFycik7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgocGF0aCk7XG4gICAgICAgICAgICB9LCAxNTAwKTtcbiAgICAgICAgICAgIGRlZmVyLnJlc29sdmUoY2hlY2spO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGRlZmVyLnJlamVjdChjaGVjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XG4gICAgfVxuICAgIHRoaXMuYWRtaW5DaGVja1N0b3JhZ2UgPSBmdW5jdGlvbiAoYXJyLCB1c2VyRGF0YSwgb2JqLCByb290LHBhdGgpIHtcbiAgICAgICAgdmFyIGNoZWNrID0ge307XG4gICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoYXJyW2ldLmVtYWlsID09PSB1c2VyRGF0YS5lbWFpbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrLmVtYWlsID0gXCJlcnJvclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFycltpXS5wYXNzd29yZCA9PT0gdXNlckRhdGEucGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICBjaGVjay5wYXNzd29yZCA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2suZW1haWwgIT09IFwiZXJyb3JcIiAmJiBjaGVjay5wYXNzd29yZCAhPT0gXCJlcnJvclwiICYmIGNoZWNrLnJvbGUgIT09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgb2JqLm5hbWUgPSB1c2VyRGF0YS5uYW1lO1xuICAgICAgICAgICAgb2JqLmVtYWlsID0gdXNlckRhdGEuZW1haWw7XG4gICAgICAgICAgICBvYmoucGFzc3dvcmQgPSB1c2VyRGF0YS5wYXNzd29yZDtcbiAgICAgICAgICAgIG9iai5yZWdEYXRlID0gcm9vdC5yZWdEYXRlO1xuICAgICAgICAgICAgb2JqLm1vZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgb2JqLnJvbGUgPSB1c2VyRGF0YS5yb2xlO1xuICAgICAgICAgICAgcm9vdC5uYW1lID0gdXNlckRhdGEubmFtZTtcbiAgICAgICAgICAgIHJvb3QuZW1haWwgPSB1c2VyRGF0YS5lbWFpbDtcbiAgICAgICAgICAgIHJvb3QucGFzc3dvcmQgPSB1c2VyRGF0YS5wYXNzd29yZDtcbiAgICAgICAgICAgIHJvb3QucmVnRGF0ZSA9IG9iai5yZWdEYXRlO1xuICAgICAgICAgICAgcm9vdC5tb2REYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJvb3Qucm9sZSA9IHVzZXJEYXRhLnJvbGU7XG4gICAgICAgICAgICBhcnIucHVzaChvYmopO1xuICAgICAgICAgICAgdGhpcy5zZXQoXCJzdG9yYWdlXCIsYXJyKTtcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuICAgICAgICAgICAgIH0sIDE1MDApO1xuICAgICAgICAgICAgZGVmZXIucmVzb2x2ZShjaGVjayk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgZGVmZXIucmVqZWN0KGNoZWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy50b2FzdHIgPSBmdW5jdGlvbihtZXNzYWdlKXtcbiAgICAgICAgdG9hc3RyLmluZm8obWVzc2FnZSk7XG4gICAgfVxufV0pOyIsInZhciBhZG1pblByb2ZDdHJsID0gYW5ndWxhci5tb2R1bGUoXCJhZG1pblByb2ZDdHJsXCIsIFtcInJvdXRlc1wiXSk7XG5hZG1pblByb2ZDdHJsLmNvbnRyb2xsZXIoXCJhZG1pblByb2ZDdHJsXCIsIFtcIiRzY29wZVwiLCBcIiRyb290U2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uKSB7XG5cbiAgICAkbG9jYXRpb24ucGF0aChcIi9hZG1pbi1wcm9maWxlL3VzZXJzXCIpO1xuICAgIGlmICgkcm9vdFNjb3BlLnVzZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIilcbiAgICB9XG4gICAgJHNjb3BlLnVzZXJEYXRhID0gJHJvb3RTY29wZS51c2VyRGF0YTtcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICB9XG59XSk7IiwidmFyIGFkbWluUHJvZkVkaXRVc2VyQ3RybCA9IGFuZ3VsYXIubW9kdWxlKFwiYWRtaW5Qcm9mRWRpdFVzZXJDdHJsXCIsW1wicm91dGVzXCIsXCJzZXJ2aWNlc1wiXSlcbmFkbWluUHJvZkVkaXRVc2VyQ3RybC5jb250cm9sbGVyKFwiYWRtaW5Qcm9mRWRpdFVzZXJDdHJsXCIsW1wiJHNjb3BlXCIsXCIkcm9vdFNjb3BlXCIsXCIkbG9jYXRpb25cIixcInN0b3JhZ2VcIiwgZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUsJGxvY2F0aW9uLHN0b3JhZ2Upe1xuXG4gICAgICAgIGlmKCRyb290U2NvcGUudXNlciA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKVxuICAgICAgICB9XG4gICAgICAgICRzY29wZS5wbGFjZWhvbGRlciA9ICRyb290U2NvcGUuYWRtaW5Vc2VyO1xuICAgICAgICAkc2NvcGUudXNlckRhdGEgPSB7fTtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICB2YXIgYXJyID0gW107XG4gICAgICAgIHZhciBzdHIgPSBzdG9yYWdlLnN0cigpO1xuICAgICAgICB2YXIgdXNlckRhdGEgPSAkc2NvcGUudXNlckRhdGE7XG4gICAgICAgIHZhciByb290RGF0YSA9ICRyb290U2NvcGUuYWRtaW5Vc2VyO1xuICAgIFxuICAgICAgICBzdG9yYWdlLmFyclNwbGljZShzdHIsYXJyLHJvb3REYXRhLG9iailcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBhcnIgPSBkYXRhO1xuICAgICAgICB9KTtcbiAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKHVzZXIpeyBcbiAgICAgICAgICAgc3RvcmFnZS5hZG1pbkNoZWNrU3RvcmFnZShhcnIsdXNlckRhdGEsb2JqLHJvb3REYXRhLFwiL2FkbWluLXByb2ZpbGUvdXNlclwiKVxuICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiVXNlciBlZGl0ZWQhXCIpO1xuICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICBpZihlcnJvci5lbWFpbCA9PT0gXCJlcnJvclwiKXtcbiAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW1haWwgYWxyZWFkeSBleGlzdFwiKTtcbiAgICAgICAgICAgICAgIH1lbHNlIGlmKGVycm9yLnBhc3N3b3JkID09PSBcImVycm9yXCIpe1xuICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJQYXNzd29yZCBhbHJlYWR5IGV4aXN0XCIpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9KTtcbiAgICAgICB9XG4gXG59XSk7XG4iLCJ2YXIgYWRtaW5Qcm9mVXNlckN0cmwgPSBhbmd1bGFyLm1vZHVsZShcImFkbWluUHJvZlVzZXJDdHJsXCIsIFtcInJvdXRlc1wiXSk7XG5hZG1pblByb2ZVc2VyQ3RybC5jb250cm9sbGVyKFwiYWRtaW5Qcm9mVXNlckN0cmxcIiwgW1wiJHNjb3BlXCIsIFwiJHJvb3RTY29wZVwiLCBcIiRsb2NhdGlvblwiLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pIHtcblxuICAgIGlmICgkcm9vdFNjb3BlLnVzZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIilcbiAgICB9XG4gICAgJHNjb3BlLnVzZXJEYXRhID0gJHJvb3RTY29wZS5hZG1pblVzZXI7XG59XSk7IiwidmFyIGFkbWluUHJvZlVzZXJzQ3RybCA9IGFuZ3VsYXIubW9kdWxlKFwiYWRtaW5Qcm9mVXNlcnNDdHJsXCIsIFtcInJvdXRlc1wiLCBcInNlcnZpY2VzXCJdKTtcbmFkbWluUHJvZlVzZXJzQ3RybC5jb250cm9sbGVyKFwiYWRtaW5Qcm9mVXNlcnNDdHJsXCIsIFtcIiRzY29wZVwiLCBcIiRyb290U2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgXCJzdG9yYWdlXCIsIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRsb2NhdGlvbiwgc3RvcmFnZSkge1xuXG4gICAgaWYgKCRyb290U2NvcGUudXNlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICB9XG4gICAgJHNjb3BlLnN0b3JhZ2UgPSBzdG9yYWdlLnN0cigpO1xuICAgICRzY29wZS5saW5rID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvYWRtaW4tcHJvZmlsZS91c2VyXCIpO1xuICAgICAgICAkcm9vdFNjb3BlLmFkbWluVXNlciA9IHVzZXI7XG4gICAgfVxufV0pOyIsInZhciBjb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKFwiY29udHJvbGxlcnNcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsb2dpbkN0cmxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBcInJlZ2lzdGVyQ3RybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIFwiYWRtaW5Qcm9mQ3RybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIFwiYWRtaW5Qcm9mVXNlcnNDdHJsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgXCJhZG1pblByb2ZVc2VyQ3RybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIFwiYWRtaW5Qcm9mRWRpdFVzZXJDdHJsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgXCJteVByb2ZDdHJsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgXCJteVByb2ZEYXRhQ3RybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIFwibXlQcm9mRWRpdEN0cmxcIlxuXG5cbl0pOyIsInZhciBsb2dpbkN0cmwgPSBhbmd1bGFyLm1vZHVsZShcImxvZ2luQ3RybFwiLCBbXSk7XG5sb2dpbkN0cmwuY29udHJvbGxlcihcImxvZ2luQ3RybFwiLCBbXCIkc2NvcGVcIiwgXCIkaHR0cFwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb290U2NvcGVcIiwgXCIkdGltZW91dFwiLCBcInN0b3JhZ2VcIiwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbiwgJHJvb3RTY29wZSwgJHRpbWVvdXQsIHN0b3JhZ2UpIHsgICAgIFxuICAgICAgc3RvcmFnZS50b2FzdHIoXCJQbGVhc2UgbG9nIGluIVwiKTtcbiAgICAgICAgdmFyIHN0ciA9IHN0b3JhZ2Uuc3RyKCk7XG4gICAgICAgIHN0b3JhZ2UuaW5pdChzdHIpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsgICAgICAgICBcbiAgICAgICAgfSlcbiAgICBcbiAgICAgICAgc3RvcmFnZS5zZXQoXCJzdG9yYWdlXCIsIHN0cik7XG4gICAgICAgIHZhciBjaGVjayA9IHt9O1xuICAgICAgICB2YXIgdXNlckRhdGEgPSB7fTtcbiAgICAgICAgdmFyIGxvZ2dlZDtcbiAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgIHN0b3JhZ2UuY2hlY2tMb2dpbihzdHIsIHVzZXIsIGNoZWNrLCB1c2VyRGF0YSlcbiAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICRyb290U2NvcGUudXNlckRhdGEgPSBkYXRhO1xuICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc3RvcmFnZS5sb2dpblJlZGlyZWN0KGNoZWNrLCBsb2dnZWQpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyICA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICBpZihjaGVjay5yb2xlID09PSBcImFkbWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvYWRtaW4tcHJvZmlsZVwiKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLnJvbGUgPT09IFwidXNlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL215LXByb2ZpbGVcIik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIldyb25nIGZ1bGxuYW1lIG9yIHBhc3N3b3JkIVwiKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIDEwMDApO1xufVxufV0pOyIsInZhciBteVByb2ZDdHJsID0gYW5ndWxhci5tb2R1bGUoXCJteVByb2ZDdHJsXCIsIFtcInJvdXRlc1wiLCBcInNlcnZpY2VzXCIsIFwiZGlyZWN0aXZlc1wiXSk7XG5teVByb2ZDdHJsLmNvbnRyb2xsZXIoXCJteVByb2ZDdHJsXCIsIFtcIiRyb290U2NvcGVcIiwgXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgXCJzdG9yYWdlXCIsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgc3RvcmFnZSkge1xuXG4gICAgJGxvY2F0aW9uLnBhdGgoXCIvbXktcHJvZmlsZS9kYXRhXCIpO1xuICAgICRzY29wZS51c2VyRGF0YSA9ICRyb290U2NvcGUudXNlckRhdGE7XG5cbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICB9XG59XSk7IiwidmFyIG15UHJvZkRhdGFDdHJsID0gYW5ndWxhci5tb2R1bGUoXCJteVByb2ZEYXRhQ3RybFwiLCBbXCJyb3V0ZXNcIl0pO1xubXlQcm9mRGF0YUN0cmwuY29udHJvbGxlcihcIm15UHJvZkRhdGFDdHJsXCIsIFtcIiRzY29wZVwiLCBcIiRodHRwXCIsIFwiJHJvb3RTY29wZVwiLCBcIiRsb2NhdGlvblwiLGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pe1xuICAgICAgICBcbiAgICAgICBpZiAoJHJvb3RTY29wZS51c2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKVxuICAgICAgICB9XG4gICAgICAgICRzY29wZS51c2VyRGF0YSA9ICRyb290U2NvcGUudXNlckRhdGE7XG59XSk7IiwidmFyIG15UHJvZkVkaXRDdHJsID0gYW5ndWxhci5tb2R1bGUoXCJteVByb2ZFZGl0Q3RybFwiLCBbXCJyb3V0ZXNcIiwgXCJzZXJ2aWNlc1wiXSk7XG5teVByb2ZFZGl0Q3RybC5jb250cm9sbGVyKFwibXlQcm9mRWRpdEN0cmxcIiwgW1wiJHNjb3BlXCIsIFwiJHJvb3RTY29wZVwiLCBcIiRsb2NhdGlvblwiLCBcIiR0aW1lb3V0XCIsIFwic3RvcmFnZVwiLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sICR0aW1lb3V0LCBzdG9yYWdlKSB7XG5cbiAgICBpZiAoJHJvb3RTY29wZS51c2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpXG4gICAgfVxuICAgICRzY29wZS5wbGFjZWhvbGRlciA9ICRyb290U2NvcGUudXNlckRhdGE7XG4gICAgJHNjb3BlLnVzZXJEYXRhID0ge307XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICB2YXIgc3RyID0gc3RvcmFnZS5zdHIoKTtcbiAgICB2YXIgdXNlckRhdGEgPSAkc2NvcGUudXNlckRhdGE7XG4gICAgdmFyIHJvb3REYXRhID0gJHJvb3RTY29wZS51c2VyRGF0YTtcblxuICAgIHN0b3JhZ2UuYXJyU3BsaWNlKHN0ciwgYXJyLCByb290RGF0YSwgb2JqKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgYXJyID0gZGF0YTtcbiAgICAgICAgfSk7XG5cbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgc3RvcmFnZS51c2VyQ2hlY2tTdG9yYWdlKGFyciwgdXNlckRhdGEsIG9iaiwgcm9vdERhdGEsIFwiL215LXByb2ZpbGUvZGF0YVwiKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlVzZXIgZWRpdGVkIVwiKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5lbWFpbCA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVtYWlsIGFscmVhZHkgZXhpc3RcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvci5wYXNzd29yZCA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlBhc3N3b3JkIGFscmVhZHkgZXhpc3RcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxufV0pOyIsInZhciByZWdpc3RlckN0cmwgPSBhbmd1bGFyLm1vZHVsZShcInJlZ2lzdGVyQ3RybFwiLCBbXCJyb3V0ZXNcIixcInNlcnZpY2VzXCJdKTtcbnJlZ2lzdGVyQ3RybC5jb250cm9sbGVyKFwicmVnaXN0ZXJDdHJsXCIsIFtcIiRzY29wZVwiLCBcIiRodHRwXCIsIFwiJGxvY2F0aW9uXCIsIFwiJHRpbWVvdXRcIixcInN0b3JhZ2VcIiwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbiwgJHRpbWVvdXQsc3RvcmFnZSkge1xuICAgIFxuICAgIHN0b3JhZ2UudG9hc3RyKFwiUGxlYXNlIGZpbGwgdGhlIGZvcm0hXCIpO1xuICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgc3RvcmFnZS5yZWdpc3Rlcih1c2VyKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlVzZXIgY3JlYXRlZCFcIik7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgfSwgMTYwMCk7XG4gICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICB0b2FzdHIud2FybmluZyhcIkVtYWlsIG9yIHBhc3N3b3JkIGFscmVhZHkgZXhpc3QhXCIpO1xuICAgICAgIH0pXG4gICAgfVxufV0pOyJdfQ==
